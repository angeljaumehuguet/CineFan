// Generated by view binder compiler. Do not edit!
package com.example.cinefan.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cinefan.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFeedBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnEscribirPrimera;

  @NonNull
  public final FloatingActionButton fabAgregar;

  @NonNull
  public final LinearLayout layoutCargandoMas;

  @NonNull
  public final LinearLayout layoutSinResenas;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerResenas;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityFeedBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnEscribirPrimera, @NonNull FloatingActionButton fabAgregar,
      @NonNull LinearLayout layoutCargandoMas, @NonNull LinearLayout layoutSinResenas,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView recyclerResenas,
      @NonNull SwipeRefreshLayout swipeRefresh, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.btnEscribirPrimera = btnEscribirPrimera;
    this.fabAgregar = fabAgregar;
    this.layoutCargandoMas = layoutCargandoMas;
    this.layoutSinResenas = layoutSinResenas;
    this.progressBar = progressBar;
    this.recyclerResenas = recyclerResenas;
    this.swipeRefresh = swipeRefresh;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFeedBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFeedBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_feed, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFeedBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_escribir_primera;
      MaterialButton btnEscribirPrimera = ViewBindings.findChildViewById(rootView, id);
      if (btnEscribirPrimera == null) {
        break missingId;
      }

      id = R.id.fab_agregar;
      FloatingActionButton fabAgregar = ViewBindings.findChildViewById(rootView, id);
      if (fabAgregar == null) {
        break missingId;
      }

      id = R.id.layout_cargando_mas;
      LinearLayout layoutCargandoMas = ViewBindings.findChildViewById(rootView, id);
      if (layoutCargandoMas == null) {
        break missingId;
      }

      id = R.id.layout_sin_resenas;
      LinearLayout layoutSinResenas = ViewBindings.findChildViewById(rootView, id);
      if (layoutSinResenas == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recycler_resenas;
      RecyclerView recyclerResenas = ViewBindings.findChildViewById(rootView, id);
      if (recyclerResenas == null) {
        break missingId;
      }

      id = R.id.swipe_refresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityFeedBinding((CoordinatorLayout) rootView, btnEscribirPrimera, fabAgregar,
          layoutCargandoMas, layoutSinResenas, progressBar, recyclerResenas, swipeRefresh, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
